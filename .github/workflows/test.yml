# We use `actions-rs` for most of our actions
#
# This file is for the main tests. clippy & rustfmt are separate workflows
on: [push, pull_request]
name: Cargo Test

env:
  CARGO_TERM_COLOR: always
  # has a history of occasional bugs (especially on old versions)
  #
  # the ci is free so we might as well use it ;)
  CARGO_INCREMENTAL: 0


# Tested versions:
# 1. stable
# 2. nightly
# 3. Minimum Supported Rust Version (MSRV)

jobs:
  test:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Even if one job fails we still want to see the other ones
      matrix:
        rust:
          # Minimum Supported Rust Version: 1.49
          #
          # This is hardcoded and needs to be in sync with Cargo.toml and the README
          #
          # Right now we have to explicitly list the combination of features & msrv,
          # because some feature combinations are unsupported (currently nested-values).
          #
          # TODO: Once the MSRV supports all feature combos, add this back
          # - << put msrv here >>

          # Per the MSRV policy (discussed in Wiki/docs), this places an upper bound on the MSRV
          #
          # In other words, we can never raise the MSRV past this, and must always support it.
          - "stable minus 15 releases"
          # Major release 1.56: The first version to support `edition="2021"`
          #
          # This appears to be the earliest version that `erased-serde` supports,
          # so is the earliest one we can enable the 'nested-values' feature.
          - 1.56
          # The most recent version of stable rust (automatically updated)
          - stable
          - nightly
        # NOTE: Features to test must be specified manually. They are applied to all versions separately.
        #
        # This has the advantage of being more flexible and thorough
        # This has the disadvantage of being more verbose
        #
        # Specific feature combos can be overridden per-version with 'include' and 'ecclude'
        features:
          - "std"
          - "std nested-values"
          - "std dynamic-keys"
          - "std nothreads"
          - "std nested-values dynamic-keys"
          - "std nested-values dynamic-keys nothreads"
        include:
          # Minimum Supported Rust Version (1.49) doesn't support nested-values feature
          #
          # This is because the erased-serde dependency currently requires edition="2021", which was added in Rust 1.56.
          # As a workaround, we explicitly include the combinations of features that we want to test on MSRV.
          #
          # TODO: Go back to testing all features (see above)
          - rust: 1.49
            features: "std" # Default features
          - rust: 1.49
            features: "std dynamic-keys"
          - rust: 1.49
            features: "std nothreads"
          - rust: 1.49
            features: "std nothreads dynamic-keys" # All (supported) features

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy
      - name: Check
        run: |
          cargo check --all-targets --verbose --no-default-features --features "${{ matrix.features }}"
        # A failing `cargo check` always fails the build
        continue-on-error: false
      - name: Test
        run: |
          cargo test --all-targets --verbose --no-default-features --features "${{ matrix.features }}"

        # We require tests to succeed on all the feature combinations.
        #
        # However, we can grant special exceptions for the Minimum Supported Rust Version
        # if there is a really good reason (like a dependency that requires a newer version).
        continue-on-error: false

      - name: Clippy
        # Run clippy with default settings, to catch clippy::correctness issues
        # It would be nice if we could figure out how to turn clippy warnings into Github warnings.
        # This is what actions-rs/clippy-check does, but that is deprecated.
        run: |
          cargo clippy --all-targets --verbose --features "${{ matrix.features }}"
